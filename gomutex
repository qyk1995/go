package main

import (
    "fmt"
    "sync"
)

func main() {
    var mu sync.Mutex
    var conut = 0
    // 等待所有goroutine执行完毕
    var wg sync.WaitGroup
    wg.Add(10)

    for i := 0; i < 10; i++ {
        go func() {
            defer wg.Done()
            for j := 0; j < 100000; j++ {
                mu.Lock()
                conut++
                mu.Unlock()
            }
        }()
    }
    wg.Wait()
    fmt.Println(conut)
}
















package main

import (
    "fmt"
    "sync"
)

type Counter struct {
    sync.Mutex
    Count uint
}

func main() {
    var conuter Counter
    // 等待所有goroutine执行完毕
    var wg sync.WaitGroup
    wg.Add(10)

    for i := 0; i < 10; i++ {
        go func() {
            defer wg.Done()
            for j := 0; j < 100000; j++ {
                conuter.Lock()
                conuter.Count++
                conuter.Unlock()
            }
        }()
    }
    wg.Wait()
    fmt.Println(conuter.Count)
}
 





package main

import (
	"fmt"
	"sync"
)

type Counter struct {
	CounterType int
	Name        string
	mu          sync.Mutex
	count       uint64
}

func (c *Counter) Incr() {
	c.mu.Lock()
	c.count++
	c.mu.Unlock()
}
func (c *Counter) Count() uint64 {
	c.mu.Lock()
	defer c.mu.Unlock()
	return c.count
}
func main() {
	var conuter Counter
	// 等待所有goroutine执行完毕
	var wg sync.WaitGroup
	wg.Add(10)

	for i := 0; i < 10; i++ {
		go func() {
			defer wg.Done()
			for j := 0; j < 100000; j++ {
				conuter.Incr()
			}
		}()
	}
	wg.Wait()
	fmt.Println(conuter.count)
}




